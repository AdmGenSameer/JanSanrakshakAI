import React, { useState } from 'react';
import {
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Typography,
  CircularProgress,
  Box,
  Snackbar,
  Alert
} from '@mui/material';
import jsPDF from 'jspdf';
import { useAppContext } from '../context/useAppContext';

const SaveAssessmentButton = () => {
  const { state } = useAppContext();
  const { user_data } = state;
  const [loading, setLoading] = useState(false);
  const [dialog, setDialog] = useState({ open: false, type: '' });
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });

  const generatePDF = async () => {
    setLoading(true);
    try {
      const pdf = new jsPDF();
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      
      // Header
      pdf.setFontSize(20);
      pdf.setTextColor(33, 150, 243);
      pdf.text('Rainwater Harvesting Assessment Report', pageWidth/2, 20, { align: 'center' });
      
      // User Information
      pdf.setFontSize(14);
      pdf.setTextColor(0, 0, 0);
      pdf.text(`Assessment for: ${user_data.name}`, 20, 40);
      pdf.text(`Location: ${user_data.location}`, 20, 50);
      pdf.text(`Date: ${new Date().toLocaleDateString()}`, 20, 60);
      pdf.text(`Assessment ID: ${user_data.assessment_id}`, 20, 70);
      
      // Results Summary
      if (user_data.results) {
        const results = user_data.results;
        
        pdf.setFontSize(16);
        pdf.setTextColor(33, 150, 243);
        pdf.text('Assessment Results', 20, 90);
        
        pdf.setFontSize(12);
        pdf.setTextColor(0, 0, 0);
        
        const resultData = [
          `• Harvestable Water: ${Math.round(results.harvestableWater).toLocaleString()} L/year`,
          `• Recommended Structure: ${results.recommendedStructure}`,
          `• Installation Cost: ₹${results.installationCost.toLocaleString()}`,
          `• Annual Savings: ₹${results.annualSavings.toLocaleString()}`,
          `• Payback Period: ${results.paybackPeriod} years`,
          `• Overall Efficiency: ${Math.round(results.overallEfficiency * 100)}%`
        ];
        
        let yPos = 110;
        resultData.forEach(item => {
          pdf.text(item, 20, yPos);
          yPos += 10;
        });
        
        // System Specifications
        pdf.setFontSize(16);
        pdf.setTextColor(33, 150, 243);
        pdf.text('System Specifications', 20, yPos + 20);
        
        pdf.setFontSize(12);
        pdf.setTextColor(0, 0, 0);
        yPos += 40;
        
        const specs = [
          `• Roof Area: ${user_data.roof_area} sq m`,
          `• Roof Type: ${user_data.roof_type}`,
          `• Roof Age: ${user_data.roof_age} years`,
          `• Open Space: ${user_data.open_space} sq m`,
          `• Number of Dwellers: ${user_data.dwellers}`,
          `• Aquifer Type: ${results.aquiferType}`,
          `• Water Depth: ${results.waterLevel} feet`
        ];
        
        specs.forEach(item => {
          pdf.text(item, 20, yPos);
          yPos += 10;
        });
      }
      
      // Footer
      pdf.setFontSize(10);
      pdf.setTextColor(128, 128, 128);
      pdf.text('Generated by JanSanrakshak AI - Rainwater Harvesting Assessment Tool', pageWidth/2, pageHeight - 10, { align: 'center' });
      
      // Save PDF
      pdf.save(`RWH_Assessment_${user_data.assessment_id}.pdf`);
      
      setSnackbar({
        open: true,
        message: 'PDF report downloaded successfully!',
        severity: 'success'
      });
      
    } catch (error) {
      console.error('PDF generation error:', error);
      setSnackbar({
        open: true,
        message: 'Failed to generate PDF. Please try again.',
        severity: 'error'
      });
    } finally {
      setLoading(false);
      setDialog({ open: false, type: '' });
    }
  };

  const saveAssessment = async () => {
    setLoading(true);
    try {
      // In real implementation, save to backend
      // await apiService.saveAssessment(user_data);
      
      // For now, save to localStorage
      const savedAssessments = JSON.parse(localStorage.getItem('rwh_assessments') || '[]');
      savedAssessments.push({
        ...user_data,
        savedAt: new Date().toISOString()
      });
      localStorage.setItem('rwh_assessments', JSON.stringify(savedAssessments));
      
      setSnackbar({
        open: true,
        message: 'Assessment saved successfully!',
        severity: 'success'
      });
      
    } catch (error) {
      console.error('Save error:', error);
      setSnackbar({
        open: true,
        message: 'Failed to save assessment. Please try again.',
        severity: 'error'
      });
    } finally {
      setLoading(false);
      setDialog({ open: false, type: '' });
    }
  };

  const handleAction = (type) => {
    setDialog({ open: true, type });
  };

  const executeAction = () => {
    if (dialog.type === 'pdf') {
      generatePDF();
    } else if (dialog.type === 'save') {
      saveAssessment();
    }
  };

  if (!state.calculation_done || !user_data.results) {
    return null;
  }

  return (
    <>
      <Box sx={{ display: 'flex', gap: 2, mt: 3 }}>
        <Button
          variant="contained"
          startIcon={<span style={{ fontSize: '18px' }}>📄</span>}
          onClick={() => handleAction('pdf')}
          disabled={loading}
        >
          Download PDF Report
        </Button>
        
        <Button
          variant="outlined"
          startIcon={<span style={{ fontSize: '18px' }}>💾</span>}
          onClick={() => handleAction('save')}
          disabled={loading}
        >
          Save Assessment
        </Button>
      </Box>

      <Dialog open={dialog.open} onClose={() => setDialog({ open: false, type: '' })}>
        <DialogTitle>
          {dialog.type === 'pdf' ? 'Generate PDF Report' : 'Save Assessment'}
        </DialogTitle>
        
        <DialogContent>
          <Typography variant="body1">
            {dialog.type === 'pdf' 
              ? 'Generate a comprehensive PDF report with all assessment results and recommendations?'
              : 'Save this assessment for future reference?'
            }
          </Typography>
        </DialogContent>

        <DialogActions>
          <Button 
            onClick={() => setDialog({ open: false, type: '' })}
            disabled={loading}
          >
            Cancel
          </Button>
          <Button 
            onClick={executeAction}
            variant="contained"
            disabled={loading}
            startIcon={loading ? <CircularProgress size={16} /> : (dialog.type === 'pdf' ? <span style={{ fontSize: '18px' }}>⬇️</span> : <span style={{ fontSize: '18px' }}>💾</span>)}
          >
            {loading ? 'Processing...' : (dialog.type === 'pdf' ? 'Download PDF' : 'Save')}
          </Button>
        </DialogActions>
      </Dialog>

      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
      >
        <Alert 
          onClose={() => setSnackbar({ ...snackbar, open: false })} 
          severity={snackbar.severity}
          variant="filled"
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </>
  );
};

export default SaveAssessmentButton;
